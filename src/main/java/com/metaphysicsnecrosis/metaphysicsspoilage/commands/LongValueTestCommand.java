package com.metaphysicsnecrosis.metaphysicsspoilage.commands;

import com.metaphysicsnecrosis.metaphysicsspoilage.manager.TimedFoodManager;
import com.metaphysicsnecrosis.metaphysicsspoilage.spoilage.SpoilageUtils;
import com.metaphysicsnecrosis.metaphysicsspoilage.testing.LongValueTestingManager;
import com.metaphysicsnecrosis.metaphysicsspoilage.time.TimeUtils;
import com.metaphysicsnecrosis.metaphysicsspoilage.time.WorldDayTracker;
import com.mojang.brigadier.CommandDispatcher;
import com.mojang.brigadier.arguments.LongArgumentType;
import com.mojang.brigadier.arguments.IntegerArgumentType;
import com.mojang.brigadier.context.CommandContext;
import com.mojang.brigadier.exceptions.CommandSyntaxException;
import net.minecraft.ChatFormatting;
import net.minecraft.commands.CommandSourceStack;
import net.minecraft.commands.Commands;
import net.minecraft.commands.arguments.item.ItemArgument;
import net.minecraft.commands.arguments.item.ItemInput;
import net.minecraft.commands.CommandBuildContext;
import net.minecraft.core.registries.BuiltInRegistries;
import net.minecraft.network.chat.Component;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.Items;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–æ—Ä—á–∏ —Å –±–æ–ª—å—à–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–Ω–µ–π.
 *
 * –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
 * - /spoilage_test run - –∑–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * - /spoilage_test stress <iterations> - –∑–∞–ø—É—Å–∫ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞
 * - /spoilage_test create <item> <day> - —Å–æ–∑–¥–∞–Ω–∏–µ –µ–¥—ã —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –¥–Ω–µ–º
 * - /spoilage_test setday <day> - —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –º–∏—Ä–∞
 * - /spoilage_test getday - –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –º–∏—Ä–∞
 * - /spoilage_test extreme - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
 */
public class LongValueTestCommand {

    private static final Logger LOGGER = LoggerFactory.getLogger(LongValueTestCommand.class);

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    public static void register(CommandDispatcher<CommandSourceStack> dispatcher, CommandBuildContext context) {
        dispatcher.register(Commands.literal("spoilage_test")
            .requires(source -> source.hasPermission(2)) // –¢–æ–ª—å–∫–æ –¥–ª—è OP
            .then(Commands.literal("run")
                .executes(LongValueTestCommand::runCompleteTest))
            .then(Commands.literal("stress")
                .then(Commands.argument("iterations", IntegerArgumentType.integer(1, 10000))
                    .executes(LongValueTestCommand::runStressTest)))
            .then(Commands.literal("create")
                .then(Commands.argument("item", ItemArgument.item(context))
                    .then(Commands.argument("day", LongArgumentType.longArg())
                        .executes(LongValueTestCommand::createTimedFood))))
            .then(Commands.literal("setday")
                .then(Commands.argument("day", LongArgumentType.longArg())
                    .executes(LongValueTestCommand::setWorldDay)))
            .then(Commands.literal("getday")
                .executes(LongValueTestCommand::getWorldDay))
            .then(Commands.literal("extreme")
                .executes(LongValueTestCommand::testExtremeValues))
            .then(Commands.literal("clear")
                .executes(LongValueTestCommand::clearTestResults))
            .then(Commands.literal("report")
                .executes(LongValueTestCommand::showTestReport))
        );

        LOGGER.info("–ö–æ–º–∞–Ω–¥—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ–ª—å—à–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã");
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
     */
    private static int runCompleteTest(CommandContext<CommandSourceStack> context) throws CommandSyntaxException {
        CommandSourceStack source = context.getSource();
        ServerLevel level = source.getLevel();

        source.sendSuccess(() -> Component.literal("–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ–ª—å—à–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–Ω–µ–π...")
            .withStyle(ChatFormatting.YELLOW), false);

        try {
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
            new Thread(() -> {
                try {
                    LongValueTestingManager.runCompleteTest(level);

                    source.sendSuccess(() -> Component.literal("‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.")
                        .withStyle(ChatFormatting.GREEN), false);
                } catch (Exception e) {
                    LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", e);
                    source.sendFailure(Component.literal("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: " + e.getMessage())
                        .withStyle(ChatFormatting.RED));
                }
            }).start();

            return 1;
        } catch (Exception e) {
            LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", e);
            source.sendFailure(Component.literal("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: " + e.getMessage())
                .withStyle(ChatFormatting.RED));
            return 0;
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏—Ç–µ—Ä–∞—Ü–∏–π
     */
    private static int runStressTest(CommandContext<CommandSourceStack> context) throws CommandSyntaxException {
        CommandSourceStack source = context.getSource();
        ServerLevel level = source.getLevel();
        int iterations = IntegerArgumentType.getInteger(context, "iterations");

        source.sendSuccess(() -> Component.literal("–ó–∞–ø—É—Å–∫ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞ —Å " + iterations + " –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏...")
            .withStyle(ChatFormatting.YELLOW), false);

        try {
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            new Thread(() -> {
                try {
                    LongValueTestingManager.runStressTest(level, iterations);

                    source.sendSuccess(() -> Component.literal("‚úÖ –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
                        .withStyle(ChatFormatting.GREEN), false);
                } catch (Exception e) {
                    LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞", e);
                    source.sendFailure(Component.literal("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–µ: " + e.getMessage())
                        .withStyle(ChatFormatting.RED));
                }
            }).start();

            return 1;
        } catch (Exception e) {
            LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞", e);
            source.sendFailure(Component.literal("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞: " + e.getMessage())
                .withStyle(ChatFormatting.RED));
            return 0;
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –µ–¥—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –¥–Ω–µ–º —Å–æ–∑–¥–∞–Ω–∏—è
     */
    private static int createTimedFood(CommandContext<CommandSourceStack> context) throws CommandSyntaxException {
        CommandSourceStack source = context.getSource();
        ServerLevel level = source.getLevel();
        ItemInput itemInput = ItemArgument.getItem(context, "item");
        long day = LongArgumentType.getLong(context, "day");

        try {
            ServerPlayer player = source.getPlayerOrException();
            ItemStack timedFood = TimedFoodManager.createTimedFood(itemInput.getItem(), day);

            if (timedFood.isEmpty()) {
                source.sendFailure(Component.literal("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –µ–¥—É —Å –¥–Ω–µ–º " + day +
                    ". –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–µ–¥–º–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –µ–¥–æ–π –∏–ª–∏ –¥–µ–Ω—å –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º.")
                    .withStyle(ChatFormatting.RED));
                return 0;
            }

            // –î–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–≥—Ä–æ–∫—É
            if (!player.getInventory().add(timedFood)) {
                // –ï—Å–ª–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª–æ–Ω, –¥—Ä–æ–ø–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
                player.drop(timedFood, false);
            }

            String itemName = BuiltInRegistries.ITEM.getKey(itemInput.getItem()).toString();
            source.sendSuccess(() -> Component.literal("‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–µ–¥–º–µ—Ç " + itemName + " —Å –¥–Ω–µ–º —Å–æ–∑–¥–∞–Ω–∏—è: " + day)
                .withStyle(ChatFormatting.GREEN), false);

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ä–æ–∫–µ –≥–æ–¥–Ω–æ—Å—Ç–∏
            long currentDay = WorldDayTracker.getInstance(level).getCurrentDay();
            long daysUntilSpoilage = TimedFoodManager.getDaysUntilSpoilage(timedFood, level);

            if (daysUntilSpoilage != -1) {
                source.sendSuccess(() -> Component.literal("üìÖ –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å: " + currentDay +
                    ", –¥–Ω–µ–π –¥–æ –ø–æ—Ä—á–∏: " + daysUntilSpoilage)
                    .withStyle(ChatFormatting.GRAY), false);
            }

            return 1;
        } catch (Exception e) {
            LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –µ–¥—ã —Å –¥–Ω–µ–º {}", day, e);
            source.sendFailure(Component.literal("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –µ–¥—ã: " + e.getMessage())
                .withStyle(ChatFormatting.RED));
            return 0;
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –º–∏—Ä–∞
     */
    private static int setWorldDay(CommandContext<CommandSourceStack> context) throws CommandSyntaxException {
        CommandSourceStack source = context.getSource();
        ServerLevel level = source.getLevel();
        long day = LongArgumentType.getLong(context, "day");

        try {
            long oldDay = WorldDayTracker.getInstance(level).getCurrentDay();
            TimeUtils.setDay(level, day);

            source.sendSuccess(() -> Component.literal("‚úÖ –î–µ–Ω—å –º–∏—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω —Å " + oldDay + " –Ω–∞ " + day)
                .withStyle(ChatFormatting.GREEN), false);

            // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –±–æ–ª—å—à–∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö
            if (Math.abs(day) > 1_000_000_000L) {
                source.sendSuccess(() -> Component.literal("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –±–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–Ω—è!")
                    .withStyle(ChatFormatting.YELLOW), false);
            }

            return 1;
        } catch (Exception e) {
            LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–Ω—è {}", day, e);
            source.sendFailure(Component.literal("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–Ω—è: " + e.getMessage())
                .withStyle(ChatFormatting.RED));
            return 0;
        }
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –º–∏—Ä–∞
     */
    private static int getWorldDay(CommandContext<CommandSourceStack> context) throws CommandSyntaxException {
        CommandSourceStack source = context.getSource();
        ServerLevel level = source.getLevel();

        try {
            WorldDayTracker tracker = WorldDayTracker.getInstance(level);
            long currentDay = tracker.getCurrentDay();
            long worldDay = TimeUtils.getCurrentDayFromWorldTime(level);

            source.sendSuccess(() -> Component.literal("üìÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–Ω–µ:")
                .withStyle(ChatFormatting.AQUA), false);
            source.sendSuccess(() -> Component.literal("  WorldDayTracker: " + currentDay)
                .withStyle(ChatFormatting.WHITE), false);
            source.sendSuccess(() -> Component.literal("  –ú–∏—Ä–æ–≤–æ–µ –≤—Ä–µ–º—è: " + worldDay + " –¥–µ–Ω—å")
                .withStyle(ChatFormatting.WHITE), false);

            if (currentDay != worldDay) {
                source.sendSuccess(() -> Component.literal("  ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏!")
                    .withStyle(ChatFormatting.YELLOW), false);
            }

            return 1;
        } catch (Exception e) {
            LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–Ω—è", e);
            source.sendFailure(Component.literal("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–Ω—è: " + e.getMessage())
                .withStyle(ChatFormatting.RED));
            return 0;
        }
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
     */
    private static int testExtremeValues(CommandContext<CommandSourceStack> context) throws CommandSyntaxException {
        CommandSourceStack source = context.getSource();
        ServerLevel level = source.getLevel();

        source.sendSuccess(() -> Component.literal("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π...")
            .withStyle(ChatFormatting.YELLOW), false);

        try {
            ServerPlayer player = source.getPlayerOrException();

            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            long[] testValues = {
                Long.MAX_VALUE,
                Long.MIN_VALUE,
                1_000_000_000L,
                -1_000_000_000L,
                0L
            };

            int successCount = 0;
            for (long testValue : testValues) {
                try {
                    // –¢–µ—Å—Ç–∏—Ä—É–µ–º WorldDayTracker
                    WorldDayTracker tracker = WorldDayTracker.getInstance(level);
                    tracker.setCurrentDay(testValue);
                    long retrieved = tracker.getCurrentDay();

                    boolean success = (retrieved == testValue);
                    if (success) {
                        successCount++;
                    }

                    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –µ–¥—ã
                    ItemStack food = TimedFoodManager.createTimedFood(Items.APPLE, testValue);
                    boolean foodSuccess = !food.isEmpty() && SpoilageUtils.hasTimestamp(food);

                    String status = (success && foodSuccess) ? "‚úÖ" : "‚ùå";
                    source.sendSuccess(() -> Component.literal(status + " " + testValue +
                        " (Tracker: " + success + ", Food: " + foodSuccess + ")")
                        .withStyle(success && foodSuccess ? ChatFormatting.GREEN : ChatFormatting.RED), false);

                } catch (Exception e) {
                    source.sendSuccess(() -> Component.literal("‚ùå " + testValue + " - –û—à–∏–±–∫–∞: " + e.getMessage())
                        .withStyle(ChatFormatting.RED), false);
                }
            }

            final int finalSuccessCount = successCount;
            source.sendSuccess(() -> Component.literal("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –£—Å–ø–µ—à–Ω–æ: " +
                finalSuccessCount + "/" + testValues.length)
                .withStyle(ChatFormatting.AQUA), false);

            return 1;
        } catch (Exception e) {
            LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π", e);
            source.sendFailure(Component.literal("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: " + e.getMessage())
                .withStyle(ChatFormatting.RED));
            return 0;
        }
    }

    /**
     * –û—á–∏—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
     */
    private static int clearTestResults(CommandContext<CommandSourceStack> context) throws CommandSyntaxException {
        CommandSourceStack source = context.getSource();

        try {
            LongValueTestingManager.clearTestResults();
            source.sendSuccess(() -> Component.literal("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—á–∏—â–µ–Ω—ã")
                .withStyle(ChatFormatting.GREEN), false);
            return 1;
        } catch (Exception e) {
            LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", e);
            source.sendFailure(Component.literal("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: " + e.getMessage())
                .withStyle(ChatFormatting.RED));
            return 0;
        }
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    private static int showTestReport(CommandContext<CommandSourceStack> context) throws CommandSyntaxException {
        CommandSourceStack source = context.getSource();

        try {
            var results = LongValueTestingManager.getTestResults();

            if (results.isEmpty()) {
                source.sendSuccess(() -> Component.literal("üìã –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏. –ó–∞–ø—É—Å—Ç–∏—Ç–µ /spoilage_test run")
                    .withStyle(ChatFormatting.GRAY), false);
                return 1;
            }

            source.sendSuccess(() -> Component.literal("üìã –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:")
                .withStyle(ChatFormatting.AQUA), false);

            int passed = 0;
            int total = results.size();

            for (var result : results.values()) {
                if (result.isPassed()) {
                    passed++;
                }

                String status = result.isPassed() ? "‚úÖ" : "‚ùå";
                source.sendSuccess(() -> Component.literal(status + " " + result.getComponentName() +
                    " (" + result.getExecutionTimeMs() + " –º—Å)")
                    .withStyle(result.isPassed() ? ChatFormatting.GREEN : ChatFormatting.RED), false);
            }

            final int finalPassed = passed;
            final int finalTotal = total;
            source.sendSuccess(() -> Component.literal("üèÅ –ò—Ç–æ–≥–æ: " + finalPassed + "/" + finalTotal + " —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
                .withStyle(finalPassed == finalTotal ? ChatFormatting.GREEN : ChatFormatting.YELLOW), false);

            return 1;
        } catch (Exception e) {
            LOGGER.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –æ—Ç—á–µ—Ç–∞", e);
            source.sendFailure(Component.literal("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –æ—Ç—á–µ—Ç–∞: " + e.getMessage())
                .withStyle(ChatFormatting.RED));
            return 0;
        }
    }
}